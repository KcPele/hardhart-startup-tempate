{
    "language": "Solidity",
    "sources": {
        "contracts/FundMe.sol": {
            "content": "//Get funds from users\n// withdraw funds\n// set a minimmun funding value in usd\n\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\ncontract FundMe {\n    //using a library\n    using PriceConverter for uint256;\n\n    //immutable for setting it pemanent after declering it once\n    address public immutable i_owner;\n    //constant for setting direct no more changing\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    modifier onlyOwner() {\n        if(msg.sender != i_owner) {\n            revert NotOwner() ;\n            }\n        _;\n\n    }\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    address[] public funders;\n    mapping(address => uint256) public amountToAccountFunded;\n\n   function fund() public payable {\n       //want to be able to set minimun value in usd\n       require(msg.value.getConvertionRate(priceFeed) >= MINIMUM_USD, \"Didnt sent enough!\");\n       funders.push(msg.sender);\n       amountToAccountFunded[msg.sender] = msg.value;\n\n   }\n\n   function withdraw() public payable onlyOwner{\n        for(uint funderIndex =0; funderIndex < funders.length; funderIndex++){\n            delete amountToAccountFunded[funders[funderIndex]];\n        }\n        //reset the array to be blank\n        delete funders;\n        // funders = new address[](0);\n        //or loop throug and set the address to address(0)\n\n        //sending funds\n        //transer\n        // payable(msg.sender).transfer(address(this).balance);\n        // //send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed\");\n        //call\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(sent, \"call failed\");\n    }\n\n    //when someone sends eth to save the eth the sents\n\n    receive() external payable {\n        fund();\n    }\n    fallback() external payable {\n        fund();\n    }\n\n}"
        },
        "contracts/PriceConverter.sol": {
            "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//creating a library \n//they only use internal, no state variable\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\n       //address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n    //    AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\n       \n       (, int256 price,,,) = priceFeed.latestRoundData();\n       return uint256(price * 1e10);\n       \n   }\n\n\n   function getVersion() internal view returns (uint){\n       AggregatorV3Interface version = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\n       return version.version();\n\n   }\n\n   function getConvertionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n       uint256 ethPrice = getPrice(priceFeed);\n       uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\n       return ethAmountInUsd;\n   }\n}"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
